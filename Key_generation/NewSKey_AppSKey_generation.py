from Crypto.Cipher import AES

#need to genrate NEWSKEY AND APPSKEY
#Need to sotre them in teh device yaml file so they can be extracted accordign to teh deviec ADdress
from Crypto.Cipher import AES
import yaml
import os

def generate_session_keys(dev_eui: str, app_nonce: bytes, net_id: bytes, dev_nonce: bytes,
                          config_path="config/sample_packet_config.yaml") -> tuple[bytes, bytes]:
    """
    Derives both NwkSKey and AppSKey for a device by looking up its AppKey using DevEUI.

    Args:
        dev_eui: DevEUI of the device as a hex string (e.g., "0102030405060708")
        app_nonce: 3-byte AppNonce generated by server
        net_id: 3-byte NetID
        dev_nonce: 2-byte DevNonce from device
        config_path: YAML path containing the device registry

    Returns:
        (NwkSKey, AppSKey) as 16-byte AES keys
    """
    if not os.path.exists(config_path):
        raise FileNotFoundError(f"❌ Registry file not found: {config_path}")

    with open(config_path, "r") as f:
        registry = yaml.safe_load(f)

    devices = registry.get("devices_eui", {})
    dev_info = devices.get(dev_eui.upper()) #returns the values if it finds it else returns none

    if not dev_info:
        raise ValueError(f"❌ DevEUI {dev_eui} not found in device registry.")

    app_key_hex = dev_info.get("AppKey")
    if not app_key_hex:
        raise ValueError(f"❌ AppKey missing for DevEUI {dev_eui}")

    app_key = bytes.fromhex(app_key_hex)

    # Validate input lengths
    if not (len(app_key) == 16 and len(app_nonce) == 3 and len(net_id) == 3 and len(dev_nonce) == 2):
        raise ValueError("❌ Invalid input lengths: AppKey(16), AppNonce(3), NetID(3), DevNonce(2)")

    def derive_key(key_type: int) -> bytes:
        block = bytes([key_type]) + app_nonce + net_id + dev_nonce + bytes(7)
        cipher = AES.new(app_key, AES.MODE_ECB)
        return cipher.encrypt(block)

    nwk_skey = derive_key(0x01)
    app_skey = derive_key(0x02)

    print(f"✅ Derived keys for DevEUI {dev_eui}")
    return nwk_skey, app_skey

